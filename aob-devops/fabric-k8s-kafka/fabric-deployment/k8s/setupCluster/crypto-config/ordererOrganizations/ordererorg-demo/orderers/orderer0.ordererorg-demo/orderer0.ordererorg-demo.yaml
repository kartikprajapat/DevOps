apiVersion: v1
kind: PersistentVolume
metadata:
  name: d-2ze31n0q38u3agtoucaw
spec:
  storageClassName: aws-efs
  capacity:
    storage: 1G
  accessModes:
    - ReadWriteMany
  nfs:
    path: /
    server: fs-f86463b3.efs.us-east-1.amazonaws.com
  flexVolume:
    driver: "alicloud/disk"
    fsType: "ext4"
    options:
      volumeId: "d-2ze31n0q38u3agtoucaw"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
 namespace: ordererorg-demo
 name: d-2ze31n0q38u3agtoucaw
 annotations:
  volume.beta.kubernetes.io/storage-class: aws-efs
spec:
 accessModes:
   - ReadWriteMany
 resources:
   requests:
     storage: 1G
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: ordererorg-demo
  name: orderer0-ordererorg-demo
spec:
  replicas: 1
  strategy: {}
  template:
    metadata:
      labels:
        app: hyperledger
        role: orderer
        org: ordererorg-demo
        orderer-id: orderer0
    spec:
      affinity:
       podAntiAffinity:
         requiredDuringSchedulingIgnoredDuringExecution:
         - labelSelector:
             matchExpressions:
             - key: "role"
               operator: In
               values:
               - orderer
           topologyKey: "kubernetes.io/hostname"
      containers:
      - name: orderer0-ordererorg-demo
        image: hyperledger/fabric-orderer:x86_64-1.1.0-preview
        env:
        - name: ORDERER_GENERAL_LOGLEVEL
          value: debug
        - name: ORDERER_GENERAL_LISTENADDRESS
          value: 0.0.0.0
        - name: ORDERER_GENERAL_GENESISMETHOD
          value: file
        - name: ORDERER_GENERAL_GENESISFILE
          value: /var/fabric/orderer/orderer.genesis.block
        - name: ORDERER_GENERAL_LOCALMSPID
          value: OrdererorgMSP
        - name: ORDERER_GENERAL_LOCALMSPDIR
          value: /var/fabric/orderer/msp
        - name: ORDERER_GENERAL_TLS_ENABLED
          value: "true"
        - name: ORDERER_GENERAL_TLS_PRIVATEKEY
          value: /var/fabric/orderer/tls/server.key
        - name: ORDERER_GENERAL_TLS_CERTIFICATE
          value: /var/fabric/orderer/tls/server.crt
        - name: ORDERER_GENERAL_TLS_ROOTCAS
          value: '[/var/fabric/orderer/tls/ca.crt]'
        - name: ORDERER_KAFKA_RETRY_SHORTINTERVAL
          value: "1s"
        - name: ORDERER_KAFKA_RETRY_SHORTTOTAL
          value: "30s"
        - name: ORDERER_KAFKA_VERSION
          value: "0.10.2.0"
        - name: ORDERER_KAFKA_VERBOSE
          value: "true"
        - name: aliyun_logs_fluentd
          value: "stdout"
        workingDir: /opt/gopath/src/github.com/hyperledger/fabric
        ports:
         - containerPort: 7050
        command: ["orderer"]
        volumeMounts:
         - mountPath: /var/fabric/orderer/msp
           name: certificate
           #subPath: crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp
           subPath: orderers/orderer0.ordererorg-demo/msp
         - mountPath: /var/fabric/orderer/tls
           name: certificate
           #subPath: crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/
           subPath: orderers/orderer0.ordererorg-demo/tls
         - mountPath: /var/fabric/orderer/orderer.genesis.block
           name: certificate
           subPath: genesis.block
         - mountPath: /var/hyperledger/production/orderer
           name: data
           subPath: orderer0-ordererorg-demo
      volumes:
       - name: certificate
         persistentVolumeClaim:
             claimName: ordererorg-demo-pv
       - name: data
         persistentVolumeClaim:
             claimName: d-2ze31n0q38u3agtoucaw


---
apiVersion: v1
kind: Service
metadata:
  name: orderer0
  namespace: ordererorg-demo
spec:
 selector:
   app: hyperledger
   role: orderer
   orderer-id: orderer0
   org: ordererorg-demo
 clusterIP: None
 ports:
   - name: listen-endpoint
     protocol: TCP
     port: 7050

---
apiVersion: v1
kind: Service
metadata:
  name: orderer0-ex
  namespace: ordererorg-demo
spec:
 selector:
   app: hyperledger
   role: orderer
   orderer-id: orderer0
   org: ordererorg-demo
 type: NodePort
 ports:
   - name: listen-endpoint
     protocol: TCP
     port: 7050
     targetPort: 7050
     nodePort: 32000
---
