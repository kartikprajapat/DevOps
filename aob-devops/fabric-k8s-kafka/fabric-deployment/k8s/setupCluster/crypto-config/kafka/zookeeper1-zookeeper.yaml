apiVersion: v1
kind: PersistentVolume
metadata:
  name: d-2ze0ama2kdy8scer4aqu
spec:
  storageClassName: aws-efs
  capacity:
    storage: 1G
  nfs:
    path: /
    server: fs-f86463b3.efs.us-east-1.amazonaws.com
  accessModes:
    - ReadWriteMany
  flexVolume:
    driver: "alicloud/disk"
    fsType: "ext4"
    options:
      volumeId: "d-2ze0ama2kdy8scer4aqu"
---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: d-2zehc2sfrb4getxtod2c
spec:
  storageClassName: aws-efs
  capacity:
    storage: 1G
  nfs:
    path: /
    server: fs-f86463b3.efs.us-east-1.amazonaws.com
  accessModes:
    - ReadWriteMany
  flexVolume:
    driver: "alicloud/disk"
    fsType: "ext4"
    options:
      volumeId: "d-2zehc2sfrb4getxtod2c"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
 namespace: kafka
 name: d-2ze0ama2kdy8scer4aqu
 annotations:
  volume.beta.kubernetes.io/storage-class: aws-efs
spec:
 accessModes:
   - ReadWriteMany
 resources:
   requests:
     storage: 1G
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
 namespace: kafka
 name: d-2zehc2sfrb4getxtod2c
 annotations:
  volume.beta.kubernetes.io/storage-class: aws-efs
spec:
 accessModes:
   - ReadWriteMany
 resources:
   requests:
     storage: 1G
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  namespace: kafka
  name: zookeeper1-kafka
spec:
  replicas: 1
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
       app: hyperledger
       role: zookeeper
       zookeeper-id: zookeeper1
       ns: kafka
    spec:
      affinity:
       podAntiAffinity:
         requiredDuringSchedulingIgnoredDuringExecution:
         - labelSelector:
             matchExpressions:
             - key: "role"
               operator: In
               values:
               - zookeeper
           topologyKey: "kubernetes.io/hostname"
      terminationGracePeriodSeconds: 120
      containers:
        - name: zookeeper1-kafka
          image: hyperledger/fabric-zookeeper:x86_64-1.0.6
          env:
            - name: ZOO_MY_ID
              value: "2"
            - name: ZOO_SERVERS
              value: "server.1=zookeeper0.kafka:2888:3888 server.2=0.0.0.0:2888:3888 server.3=zookeeper2.kafka:2888:3888"
            - name: ZOO_TICK_TIME
              value: "2000"
            - name: ZOO_INIT_LIMIT
              value: "10"
            - name: ZOO_SYNC_LIMIT
              value: "2"
            - name: aliyun_logs_fluentd
              value: "stdout"
          volumeMounts:
            - mountPath: /datalog
              name: datalog
              subPath: zookeeper1-kafka-log
            - mountPath: /data
              name: data
              subPath: zookeeper1-kafka
          lifecycle:
            preStop:
              exec:
                # SIGTERM triggers a quick exit; gracefully terminate instead
                command: ["zkServer.sh", "stop"]
      volumes:
        - name: datalog
          persistentVolumeClaim:
              claimName: d-2ze0ama2kdy8scer4aqu
        - name: data
          persistentVolumeClaim:
              claimName: d-2zehc2sfrb4getxtod2c
---
apiVersion: v1
kind: Service
metadata:
   namespace: kafka
   name: zookeeper1
spec:
 selector:
   app: hyperledger
   role: zookeeper
   zookeeper-id: zookeeper1
   ns: kafka
 clusterIP: None

 ports:
   - name: zookeeper-port1
     protocol: TCP
     port: 2888

   - name: zookeeper-port2
     protocol: TCP
     port: 3888

   - name: zookeeper-port3
     protocol: TCP
     port: 2181
---
apiVersion: v1
kind: Service
metadata:
   namespace: kafka
   name: zookeeper1-ex
spec:
 selector:
   app: hyperledger
   role: zookeeper
   zookeeper-id: zookeeper1
   ns: kafka
 type: NodePort
 ports:
   - name: zookeeper-port1
     protocol: TCP
     port: 2888
     targetPort: 2888
     nodePort: 32754

   - name: zookeeper-port2
     protocol: TCP
     port: 3888
     targetPort: 3888
     nodePort: 32755

   - name: zookeeper-port3
     protocol: TCP
     port: 2181
     targetPort: 2181
     nodePort: 32756
---
